# Development Environment Guide

## Development Environment Setup

### Hot Reload Development (Recommended)
```bash
# Two-Container Architecture with Full Hot Reload
python3 generate_client_env_dev.py  # Generate .env.dev (if needed)
./dev-hot-reload.sh up              # Start both containers

# ðŸš€ Primary Development URL: http://localhost:5173
# Backend API endpoint:       http://localhost:8080
# Health check:               http://localhost:8080/health
```

### Development Architecture
- **Frontend Container** (`mai-frontend-dev`): Vite dev server with Hot Module Replacement (HMR)
- **Backend Container** (`mai-backend-dev`): FastAPI with uvicorn --reload  
- **Independent Hot Reload**: Frontend and backend reload separately without interference
- **Cross-Container Communication**: Docker networking with API proxy
- **Instant Updates**: Sub-second frontend changes via HMR, automatic backend restart

## Daily Development Workflow

### Standard Workflow
```bash
# 1. Start Development Environment
./dev-hot-reload.sh up      # Start both containers with hot reload

# 2. Develop with Instant Updates
# - Edit .svelte, .ts, .css files â†’ Frontend updates instantly via HMR
# - Edit .py files in backend/ â†’ Backend restarts automatically  
# - Access: http://localhost:5173 (main development URL)

# 3. Stop When Done
./dev-hot-reload.sh down    # Stop all containers
```

### Management Commands
```bash
# Container Management
./dev-hot-reload.sh status    # Check container status
./dev-hot-reload.sh restart   # Restart both containers
./dev-hot-reload.sh clean     # Clean up containers

# Debugging & Logs  
./dev-hot-reload.sh logs-fe   # Frontend logs
./dev-hot-reload.sh logs-be   # Backend logs
./dev-hot-reload.sh shell-fe  # Access frontend container
./dev-hot-reload.sh shell-be  # Access backend container
./dev-hot-reload.sh help      # Show all available commands

# Testing
python3 -m pytest tests/     # Run tests (from host or backend container)
```

## Alternative Development Methods

### Legacy Single Container (Backup)
```bash
# Requires rebuilds for UI changes
docker-compose -f docker-compose.dev.yml up -d  # Port 3001
curl http://localhost:3001/health               # Health check
```

### Local Development (No Docker)
```bash
cd backend && ./dev.sh     # Backend only (port 8080)
npm run dev               # Frontend only (port 5173)
```

## Environment Configuration

### Environment Files
- **Production**: `generate_client_env.py` creates `.env`
- **Development**: `generate_client_env_dev.py` creates `.env.dev`
- **Documentation**: 
  - `docs/analysis/ENV_SETUP_README.md`
  - `ENV_SETUP_DEV_README.md`

### Docker Containers

**Hot Reload Development (Primary):**
- **`mai-frontend-dev`**: Vite dev server (port 5173) with HMR
- **`mai-backend-dev`**: FastAPI with hot reload (port 8080)

**Legacy Single Container (Backup):**
- **`mai-open-webui-dev`**: Combined container (port 3001)
- **`mai-open-webui-customization`**: Production testing

## Troubleshooting & Error Prevention

### Common Issues

**Hot Reload Environment:**
- **Port conflicts** â†’ Check ports 5173 (frontend) and 8080 (backend) availability
- **Hot reload not working** â†’ Verify containers have proper volume mounts with `./dev-hot-reload.sh status`
- **API calls failing** â†’ Check Docker network connectivity: `./dev-hot-reload.sh logs-be`
- **Frontend not updating** â†’ Ensure HMR is working, check browser console for WebSocket connection
- **Backend not restarting** â†’ Check volume mount for `backend/` directory in container

**General Issues:**
- **`python: command not found`** â†’ Use `python3`
- **Module import errors** â†’ Activate venv, install requirements
- **PYTHONPATH issues** â†’ Run from `backend/` directory

### Development Validation Checklist
```bash
# Hot Reload Environment Health Check
./dev-hot-reload.sh status              # Check both containers running
./dev-hot-reload.sh logs-fe | head       # Frontend startup logs (Vite ready)
./dev-hot-reload.sh logs-be | head       # Backend startup logs (uvicorn ready)

# Test Hot Reload Functionality
# 1. Edit a .svelte file â†’ Check browser updates instantly
# 2. Edit a .py file in backend/ â†’ Check backend restarts in logs
# 3. Make API call from frontend â†’ Verify cross-container communication

# Manual Health Verification (if needed)
curl http://localhost:5173              # Frontend responds
curl http://localhost:8080/health       # Backend health endpoint

# Legacy Single Container (Backup)
curl http://localhost:3001/health
docker-compose -f docker-compose.dev.yml ps

# Before Deployment
python3 -m py_compile {modified_files}  # Syntax check
```

## Hot Reload Benefits & Architecture

### Key Improvements vs. Legacy Setup
- **Instant Frontend Updates**: Sub-second changes via Vite HMR (vs. full Docker rebuilds)
- **Component State Preservation**: HMR maintains UI state when possible
- **Independent Hot Reload**: Frontend and backend reload separately without interference  
- **No Cache Busting**: Eliminated need for `docker build --no-cache`
- **Development Speed**: ~10x faster iteration cycle for UI changes
- **Production Compatibility**: Original Dockerfile and build process unchanged

### Architecture Benefits
- **Separation of Concerns**: Frontend and backend containers have distinct responsibilities
- **Scalable Development**: Easy to add more developers without build conflicts
- **Container Specialization**: Each container optimized for its specific purpose
- **Docker Best Practices**: Proper networking, health checks, and volume management