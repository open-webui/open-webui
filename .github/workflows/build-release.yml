name: Build release
on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for changes in package.json
        run: |
          git diff --cached --diff-filter=d package.json || {
            echo "No changes to package.json"
            exit 1
          }

      - name: Get version number from package.json
        id: get_version
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "::set-output name=version::$VERSION"

      - name: Extract latest CHANGELOG entry
        id: changelog
        run: |
          CHANGELOG_CONTENT=$(awk 'BEGIN {print_section=0;} /^## \[/ {if (print_section == 0) {print_section=1;} else {exit;}} print_section {print;}' CHANGELOG.md)
          CHANGELOG_ESCAPED=$(echo "$CHANGELOG_CONTENT" | sed ':a;N;$!ba;s/\n/%0A/g')
          echo "Extracted latest release notes from CHANGELOG.md:" 
          echo -e "$CHANGELOG_CONTENT"
          echo "::set-output name=content::$CHANGELOG_ESCAPED"

      - name: Create GitHub release
        id: create_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const changelog = `${{ steps.changelog.outputs.content }}`;
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${{ steps.get_version.outputs.version }}`,
              name: `v${{ steps.get_version.outputs.version }}`,
              body: changelog,
            });
            console.log(`Created release ${release.data.html_url}`);

      - name: Upload package to GitHub release
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: |
            .
            !.git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger and wait for Docker build workflow
        id: trigger_and_wait
        uses: convictional/trigger-workflow-and-wait@v1.6.4
        with:
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow_file_name: docker-build.yaml
          ref: v${{ steps.get_version.outputs.version }}
          client_payload: '{}'
          wait_interval: 10
          timeout_seconds: 3600

      - name: Print Docker build workflow result
        if: always()
        run: |
          if [ "${{ steps.trigger_and_wait.outputs.conclusion }}" = "success" ]; then
            echo -e "\033[32m‚úÖ Workflow Success!\033[0m"
          else
            echo -e "\033[31m‚ùå Workflow Failed!\033[0m"
          fi
          echo "Workflow conclusion: ${{ steps.trigger_and_wait.outputs.conclusion }}"
          echo "Workflow run ID: ${{ steps.trigger_and_wait.outputs.id }}"
          echo "Workflow URL: ${{ steps.trigger_and_wait.outputs.html_url }}"

      - name: Checkout AccelBrain-dev__confidential repository
        if: steps.trigger_and_wait.outputs.conclusion == 'success'
        uses: actions/checkout@v4
        with:
          repository: InnoIPA/AccelBrain-dev__confidential
          ref: dev
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          path: accelbrain-confidential

      - name: Get latest release tag from accelbrain-confidential repo
        if: steps.trigger_and_wait.outputs.conclusion == 'success'
        id: get_release
        run: |
          cd accelbrain-confidential || (echo "Directory not found" && exit 1)
          git fetch --tags
          TAG=$(git tag --sort=-v:refname | head -n 1)
          echo "release_tag=$TAG" >> $GITHUB_OUTPUT
          echo "release_tag=$TAG"

      - name: Update docker-compose.yml image tag
        if: steps.trigger_and_wait.outputs.conclusion == 'success'
        run: |
          cd accelbrain-confidential || (echo "Directory not found" && exit 1)
          sed -i "s|innodiskorg/open-webui:.*|innodiskorg/open-webui:v${{ steps.get_version.outputs.version }}|g" docker-compose.yml

      - name: Update CHANGELOG.md
        if: steps.trigger_and_wait.outputs.conclusion == 'success'
        run: |
          cd accelbrain-confidential || (echo "Directory not found" && exit 1)
          echo "Reading current version from CHANGELOG.md"

          # ÂÖàÂèñÂá∫‰∏ä‰∏ÄÂÄãÁâàÊú¨ËôüÔºàÁ¨¨‰∏ÄÂÄã [vX.X]Ôºâ
          PREVIOUS_VERSION=$(grep -oP '^## \[\K[0-9]+\.[0-9]+\.[0-9]+' CHANGELOG.md | head -n 1)
          echo "Previous version: $PREVIOUS_VERSION"
          if [ "v$PREVIOUS_VERSION" = "${{ steps.get_release.outputs.release_tag }}" ]; then
            echo "‚úÖ Versions match!"
            # ÂàÜÈõ¢ major.minor.patch
            MAJOR_VERSION=$(echo $PREVIOUS_VERSION | cut -d. -f1)
            MINOR_VERSION=$(echo $PREVIOUS_VERSION | cut -d. -f2)
            PATCH_VERSION=$(echo $PREVIOUS_VERSION | cut -d. -f3)

            # Patch +1
            NEW_PATCH_VERSION=$((PATCH_VERSION + 1))
            NEW_VERSION="${MAJOR_VERSION}.${MINOR_VERSION}.${NEW_PATCH_VERSION}"

            echo "üîÅ New patch version: $NEW_VERSION"

            # ÊèíÂÖ•Êñ∞ÁâàÊú¨ÂçÄÂ°ä
            awk -v accelbrain_version="$NEW_VERSION" -v chatbot_version="v${{ steps.get_version.outputs.version }}" -v date="$(date +'%Y-%m-%d')" '
            BEGIN { inserted=0 }
            {
              print $0
              if (!inserted && $0 ~ /Semantic Versioning/) {
                print ""
                print "## [" accelbrain_version "] - " date
                print ""
                print "### Fixed"
                print ""
                print "- **Update the chatbot to " chatbot_version "**"
                print ""
                inserted=1
              }
            }' CHANGELOG.md > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md

            cat CHANGELOG.md
          elif [ "$(printf '%s\n' "$PREVIOUS_VERSION" "$RELEASE_TAG" | sort -V | head -n1)" = "$RELEASE_TAG" ]; then
            awk -v chatbot_version="v${{ steps.get_version.outputs.version }}" '
            BEGIN {
              in_latest_section = 0
              inserted = 0
              done = 0
            }
            {
              # Á¢∞Âà∞Êñ∞ÁöÑÁâàÊú¨Ê®ôÈ°åÔºà## [X.X.X]ÔºâÔºåÂÉÖÁ¨¨‰∏ÄÊ¨°ÈñãÂïü latest ÂçÄÂüü
              if ($0 ~ /^## \[/) {
                if (done == 0) {
                  in_latest_section = 1
                  done = 1
                } else {
                  in_latest_section = 0
                }
              }

              # Â¶ÇÊûúÈÄôË°åÊòØËàäÁöÑ chatbot Êõ¥Êñ∞Ë®òÈåÑÔºåÁï•ÈÅéÂÆÉÔºà‰∏çËº∏Âá∫Ôºâ
              if (in_latest_section == 1 && $0 ~ /^- \*\*Update the chatbot to v[0-9]+\.[0-9]+(\.[0-9]+)?\*\*$/) {
                next
              }


              # Â¶ÇÊûúÈÇÑÊ≤íÊèíÂÖ•Êñ∞ÁâàÊú¨Ôºå‰∏îÈÅáÂà∞ ### FixedÔºåÂ∞±ÊèíÂÖ•Êñ∞Áâà
              if (in_latest_section == 1 && inserted == 0 && $0 ~ /^### Fixed$/) {
                print $0
                print "- **Update the chatbot to " chatbot_version "**"
                inserted = 1
                next
              }

              # ÂÖ∂‰ªñË°åÁÖßÂ∏∏Âç∞Âá∫
              print $0
            }
            ' CHANGELOG.md > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md

            rm -f CHANGELOG.tmp
            cat CHANGELOG.md
          else
            echo "‚ùå Version incorrect Please check AccelBrain release tag and ChangeLOG!"
            exit 1
          fi

      - name: Commit and push changes
        if: steps.trigger_and_wait.outputs.conclusion == 'success'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: bump open-webui image to v${{ steps.get_version.outputs.version }}"
          repository: ./accelbrain-confidential