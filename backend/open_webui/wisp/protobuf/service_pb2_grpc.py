# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import service_pb2 as service__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTokenAuthInfo = channel.unary_unary(
                '/message.Service/GetTokenAuthInfo',
                request_serializer=service__pb2.TokenRequest.SerializeToString,
                response_deserializer=service__pb2.TokenResponse.FromString,
                _registered_method=True)
        self.RenewToken = channel.unary_unary(
                '/message.Service/RenewToken',
                request_serializer=service__pb2.TokenRequest.SerializeToString,
                response_deserializer=service__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.CreateSession = channel.unary_unary(
                '/message.Service/CreateSession',
                request_serializer=service__pb2.SessionCreateRequest.SerializeToString,
                response_deserializer=service__pb2.SessionCreateResponse.FromString,
                _registered_method=True)
        self.FinishSession = channel.unary_unary(
                '/message.Service/FinishSession',
                request_serializer=service__pb2.SessionFinishRequest.SerializeToString,
                response_deserializer=service__pb2.SessionFinishResp.FromString,
                _registered_method=True)
        self.UploadReplayFile = channel.unary_unary(
                '/message.Service/UploadReplayFile',
                request_serializer=service__pb2.ReplayRequest.SerializeToString,
                response_deserializer=service__pb2.ReplayResponse.FromString,
                _registered_method=True)
        self.UploadCommand = channel.unary_unary(
                '/message.Service/UploadCommand',
                request_serializer=service__pb2.CommandRequest.SerializeToString,
                response_deserializer=service__pb2.CommandResponse.FromString,
                _registered_method=True)
        self.DispatchTask = channel.stream_stream(
                '/message.Service/DispatchTask',
                request_serializer=service__pb2.FinishedTaskRequest.SerializeToString,
                response_deserializer=service__pb2.TaskResponse.FromString,
                _registered_method=True)
        self.ScanRemainReplays = channel.unary_unary(
                '/message.Service/ScanRemainReplays',
                request_serializer=service__pb2.RemainReplayRequest.SerializeToString,
                response_deserializer=service__pb2.RemainReplayResponse.FromString,
                _registered_method=True)
        self.CreateCommandTicket = channel.unary_unary(
                '/message.Service/CreateCommandTicket',
                request_serializer=service__pb2.CommandConfirmRequest.SerializeToString,
                response_deserializer=service__pb2.CommandConfirmResponse.FromString,
                _registered_method=True)
        self.CheckOrCreateAssetLoginTicket = channel.unary_unary(
                '/message.Service/CheckOrCreateAssetLoginTicket',
                request_serializer=service__pb2.AssetLoginTicketRequest.SerializeToString,
                response_deserializer=service__pb2.AssetLoginTicketResponse.FromString,
                _registered_method=True)
        self.CheckTicketState = channel.unary_unary(
                '/message.Service/CheckTicketState',
                request_serializer=service__pb2.TicketRequest.SerializeToString,
                response_deserializer=service__pb2.TicketStateResponse.FromString,
                _registered_method=True)
        self.CancelTicket = channel.unary_unary(
                '/message.Service/CancelTicket',
                request_serializer=service__pb2.TicketRequest.SerializeToString,
                response_deserializer=service__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.CreateForward = channel.unary_unary(
                '/message.Service/CreateForward',
                request_serializer=service__pb2.ForwardRequest.SerializeToString,
                response_deserializer=service__pb2.ForwardResponse.FromString,
                _registered_method=True)
        self.DeleteForward = channel.unary_unary(
                '/message.Service/DeleteForward',
                request_serializer=service__pb2.ForwardDeleteRequest.SerializeToString,
                response_deserializer=service__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.GetPublicSetting = channel.unary_unary(
                '/message.Service/GetPublicSetting',
                request_serializer=service__pb2.Empty.SerializeToString,
                response_deserializer=service__pb2.PublicSettingResponse.FromString,
                _registered_method=True)
        self.GetListenPorts = channel.unary_unary(
                '/message.Service/GetListenPorts',
                request_serializer=service__pb2.Empty.SerializeToString,
                response_deserializer=service__pb2.ListenPortResponse.FromString,
                _registered_method=True)
        self.GetPortInfo = channel.unary_unary(
                '/message.Service/GetPortInfo',
                request_serializer=service__pb2.PortInfoRequest.SerializeToString,
                response_deserializer=service__pb2.PortInfoResponse.FromString,
                _registered_method=True)
        self.HandlePortFailure = channel.unary_unary(
                '/message.Service/HandlePortFailure',
                request_serializer=service__pb2.PortFailureRequest.SerializeToString,
                response_deserializer=service__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.CheckUserByCookies = channel.unary_unary(
                '/message.Service/CheckUserByCookies',
                request_serializer=service__pb2.CookiesRequest.SerializeToString,
                response_deserializer=service__pb2.UserResponse.FromString,
                _registered_method=True)
        self.RecordSessionLifecycleLog = channel.unary_unary(
                '/message.Service/RecordSessionLifecycleLog',
                request_serializer=service__pb2.SessionLifecycleLogRequest.SerializeToString,
                response_deserializer=service__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.FaceRecognitionCallback = channel.unary_unary(
                '/message.Service/FaceRecognitionCallback',
                request_serializer=service__pb2.FaceRecognitionCallbackRequest.SerializeToString,
                response_deserializer=service__pb2.FaceRecognitionCallbackResponse.FromString,
                _registered_method=True)
        self.FaceMonitorCallback = channel.unary_unary(
                '/message.Service/FaceMonitorCallback',
                request_serializer=service__pb2.FaceMonitorCallbackRequest.SerializeToString,
                response_deserializer=service__pb2.FaceMonitorCallbackResponse.FromString,
                _registered_method=True)
        self.JoinFaceMonitor = channel.unary_unary(
                '/message.Service/JoinFaceMonitor',
                request_serializer=service__pb2.JoinFaceMonitorRequest.SerializeToString,
                response_deserializer=service__pb2.JoinFaceMonitorResponse.FromString,
                _registered_method=True)


class ServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetTokenAuthInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RenewToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinishSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadReplayFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DispatchTask(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ScanRemainReplays(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCommandTicket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckOrCreateAssetLoginTicket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckTicketState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelTicket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateForward(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteForward(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPublicSetting(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetListenPorts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPortInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HandlePortFailure(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckUserByCookies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordSessionLifecycleLog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FaceRecognitionCallback(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FaceMonitorCallback(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JoinFaceMonitor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTokenAuthInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTokenAuthInfo,
                    request_deserializer=service__pb2.TokenRequest.FromString,
                    response_serializer=service__pb2.TokenResponse.SerializeToString,
            ),
            'RenewToken': grpc.unary_unary_rpc_method_handler(
                    servicer.RenewToken,
                    request_deserializer=service__pb2.TokenRequest.FromString,
                    response_serializer=service__pb2.StatusResponse.SerializeToString,
            ),
            'CreateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSession,
                    request_deserializer=service__pb2.SessionCreateRequest.FromString,
                    response_serializer=service__pb2.SessionCreateResponse.SerializeToString,
            ),
            'FinishSession': grpc.unary_unary_rpc_method_handler(
                    servicer.FinishSession,
                    request_deserializer=service__pb2.SessionFinishRequest.FromString,
                    response_serializer=service__pb2.SessionFinishResp.SerializeToString,
            ),
            'UploadReplayFile': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadReplayFile,
                    request_deserializer=service__pb2.ReplayRequest.FromString,
                    response_serializer=service__pb2.ReplayResponse.SerializeToString,
            ),
            'UploadCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadCommand,
                    request_deserializer=service__pb2.CommandRequest.FromString,
                    response_serializer=service__pb2.CommandResponse.SerializeToString,
            ),
            'DispatchTask': grpc.stream_stream_rpc_method_handler(
                    servicer.DispatchTask,
                    request_deserializer=service__pb2.FinishedTaskRequest.FromString,
                    response_serializer=service__pb2.TaskResponse.SerializeToString,
            ),
            'ScanRemainReplays': grpc.unary_unary_rpc_method_handler(
                    servicer.ScanRemainReplays,
                    request_deserializer=service__pb2.RemainReplayRequest.FromString,
                    response_serializer=service__pb2.RemainReplayResponse.SerializeToString,
            ),
            'CreateCommandTicket': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCommandTicket,
                    request_deserializer=service__pb2.CommandConfirmRequest.FromString,
                    response_serializer=service__pb2.CommandConfirmResponse.SerializeToString,
            ),
            'CheckOrCreateAssetLoginTicket': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckOrCreateAssetLoginTicket,
                    request_deserializer=service__pb2.AssetLoginTicketRequest.FromString,
                    response_serializer=service__pb2.AssetLoginTicketResponse.SerializeToString,
            ),
            'CheckTicketState': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckTicketState,
                    request_deserializer=service__pb2.TicketRequest.FromString,
                    response_serializer=service__pb2.TicketStateResponse.SerializeToString,
            ),
            'CancelTicket': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelTicket,
                    request_deserializer=service__pb2.TicketRequest.FromString,
                    response_serializer=service__pb2.StatusResponse.SerializeToString,
            ),
            'CreateForward': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateForward,
                    request_deserializer=service__pb2.ForwardRequest.FromString,
                    response_serializer=service__pb2.ForwardResponse.SerializeToString,
            ),
            'DeleteForward': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteForward,
                    request_deserializer=service__pb2.ForwardDeleteRequest.FromString,
                    response_serializer=service__pb2.StatusResponse.SerializeToString,
            ),
            'GetPublicSetting': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPublicSetting,
                    request_deserializer=service__pb2.Empty.FromString,
                    response_serializer=service__pb2.PublicSettingResponse.SerializeToString,
            ),
            'GetListenPorts': grpc.unary_unary_rpc_method_handler(
                    servicer.GetListenPorts,
                    request_deserializer=service__pb2.Empty.FromString,
                    response_serializer=service__pb2.ListenPortResponse.SerializeToString,
            ),
            'GetPortInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPortInfo,
                    request_deserializer=service__pb2.PortInfoRequest.FromString,
                    response_serializer=service__pb2.PortInfoResponse.SerializeToString,
            ),
            'HandlePortFailure': grpc.unary_unary_rpc_method_handler(
                    servicer.HandlePortFailure,
                    request_deserializer=service__pb2.PortFailureRequest.FromString,
                    response_serializer=service__pb2.StatusResponse.SerializeToString,
            ),
            'CheckUserByCookies': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckUserByCookies,
                    request_deserializer=service__pb2.CookiesRequest.FromString,
                    response_serializer=service__pb2.UserResponse.SerializeToString,
            ),
            'RecordSessionLifecycleLog': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordSessionLifecycleLog,
                    request_deserializer=service__pb2.SessionLifecycleLogRequest.FromString,
                    response_serializer=service__pb2.StatusResponse.SerializeToString,
            ),
            'FaceRecognitionCallback': grpc.unary_unary_rpc_method_handler(
                    servicer.FaceRecognitionCallback,
                    request_deserializer=service__pb2.FaceRecognitionCallbackRequest.FromString,
                    response_serializer=service__pb2.FaceRecognitionCallbackResponse.SerializeToString,
            ),
            'FaceMonitorCallback': grpc.unary_unary_rpc_method_handler(
                    servicer.FaceMonitorCallback,
                    request_deserializer=service__pb2.FaceMonitorCallbackRequest.FromString,
                    response_serializer=service__pb2.FaceMonitorCallbackResponse.SerializeToString,
            ),
            'JoinFaceMonitor': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinFaceMonitor,
                    request_deserializer=service__pb2.JoinFaceMonitorRequest.FromString,
                    response_serializer=service__pb2.JoinFaceMonitorResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'message.Service', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('message.Service', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Service(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetTokenAuthInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/message.Service/GetTokenAuthInfo',
            service__pb2.TokenRequest.SerializeToString,
            service__pb2.TokenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RenewToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/message.Service/RenewToken',
            service__pb2.TokenRequest.SerializeToString,
            service__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/message.Service/CreateSession',
            service__pb2.SessionCreateRequest.SerializeToString,
            service__pb2.SessionCreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FinishSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/message.Service/FinishSession',
            service__pb2.SessionFinishRequest.SerializeToString,
            service__pb2.SessionFinishResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadReplayFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/message.Service/UploadReplayFile',
            service__pb2.ReplayRequest.SerializeToString,
            service__pb2.ReplayResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/message.Service/UploadCommand',
            service__pb2.CommandRequest.SerializeToString,
            service__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DispatchTask(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/message.Service/DispatchTask',
            service__pb2.FinishedTaskRequest.SerializeToString,
            service__pb2.TaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ScanRemainReplays(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/message.Service/ScanRemainReplays',
            service__pb2.RemainReplayRequest.SerializeToString,
            service__pb2.RemainReplayResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateCommandTicket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/message.Service/CreateCommandTicket',
            service__pb2.CommandConfirmRequest.SerializeToString,
            service__pb2.CommandConfirmResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckOrCreateAssetLoginTicket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/message.Service/CheckOrCreateAssetLoginTicket',
            service__pb2.AssetLoginTicketRequest.SerializeToString,
            service__pb2.AssetLoginTicketResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckTicketState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/message.Service/CheckTicketState',
            service__pb2.TicketRequest.SerializeToString,
            service__pb2.TicketStateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelTicket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/message.Service/CancelTicket',
            service__pb2.TicketRequest.SerializeToString,
            service__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateForward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/message.Service/CreateForward',
            service__pb2.ForwardRequest.SerializeToString,
            service__pb2.ForwardResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteForward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/message.Service/DeleteForward',
            service__pb2.ForwardDeleteRequest.SerializeToString,
            service__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPublicSetting(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/message.Service/GetPublicSetting',
            service__pb2.Empty.SerializeToString,
            service__pb2.PublicSettingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetListenPorts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/message.Service/GetListenPorts',
            service__pb2.Empty.SerializeToString,
            service__pb2.ListenPortResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPortInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/message.Service/GetPortInfo',
            service__pb2.PortInfoRequest.SerializeToString,
            service__pb2.PortInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HandlePortFailure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/message.Service/HandlePortFailure',
            service__pb2.PortFailureRequest.SerializeToString,
            service__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckUserByCookies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/message.Service/CheckUserByCookies',
            service__pb2.CookiesRequest.SerializeToString,
            service__pb2.UserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RecordSessionLifecycleLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/message.Service/RecordSessionLifecycleLog',
            service__pb2.SessionLifecycleLogRequest.SerializeToString,
            service__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FaceRecognitionCallback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/message.Service/FaceRecognitionCallback',
            service__pb2.FaceRecognitionCallbackRequest.SerializeToString,
            service__pb2.FaceRecognitionCallbackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FaceMonitorCallback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/message.Service/FaceMonitorCallback',
            service__pb2.FaceMonitorCallbackRequest.SerializeToString,
            service__pb2.FaceMonitorCallbackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def JoinFaceMonitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/message.Service/JoinFaceMonitor',
            service__pb2.JoinFaceMonitorRequest.SerializeToString,
            service__pb2.JoinFaceMonitorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
